package edu.ucdenver.ccp.medline.xml;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.zip.GZIPInputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.EventFilter;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.XMLEvent;

import org.medline.PubmedArticle;

/**
 * This class is an implementation of the {@link Iterator} interface over
 * {@link PubmedArticle} objects. It uses the classes generated by jaxb from
 * the Medline DTD to implement an XML parser for files distributed by NLM when
 * leasing the Medline database.
 *
 */
public class MedlineXmlParser implements Iterator<PubmedArticle> {

	private Class<PubmedArticle> iteratedClass = PubmedArticle.class;
	private XMLEventReader xmlfer;
	private XMLEventReader xmler;
	private InputStream is;
	private JAXBContext ctx;
	private Unmarshaller um;

	private PubmedArticle nextCitation = null;

	public MedlineXmlParser(File xmlFile) throws IOException, JAXBException, XMLStreamException {
		initializeParser(xmlFile);
	}

	private void initializeParser(File xmlFile) throws IOException, JAXBException, XMLStreamException {
		InputStream is;
		if (xmlFile.getName().endsWith(".gz")) {
			is = new GZIPInputStream(new FileInputStream(xmlFile));
		} else {
			is = new FileInputStream(xmlFile);
		}
		ctx = JAXBContext.newInstance(iteratedClass);
		um = ctx.createUnmarshaller();
		XMLInputFactory xmlif = XMLInputFactory.newInstance();
		xmler = xmlif.createXMLEventReader(is);
		EventFilter filter = new EventFilter() {
			public boolean accept(XMLEvent event) {
				return event.isStartElement();
			}
		};
		xmlfer = xmlif.createFilteredReader(xmler, filter);
		xmlfer.nextEvent();
	}

	@Override
	public boolean hasNext() {
		if (nextCitation == null) {
			try {
				if (xmlfer.peek() != null) {
					JAXBElement<?> unmarshalledElement = um.unmarshal(xmler, iteratedClass);
					Object o = unmarshalledElement.getValue();
					if (iteratedClass.isInstance(o)) {
						nextCitation = iteratedClass.cast(o);
						return true;
					}
				}
				return false;
			} catch (XMLStreamException | JAXBException e) {
				throw new IllegalStateException(e);
			}
		}
		return true;
	}

	@Override
	public PubmedArticle next() {
		if (!hasNext()) {
			throw new NoSuchElementException();
		}
		PubmedArticle citation = nextCitation;
		nextCitation = null;
		return citation;
	}

	public void close() throws IOException {
		if (is != null) {
			is.close();
		}
	}

}
